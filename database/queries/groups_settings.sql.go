// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: groups_settings.sql

package queries

import (
	"context"
)

const createGroupSettings = `-- name: CreateGroupSettings :exec
INSERT INTO groups_settings (
	group_id,
	is_welcome_message_enabled
)
VALUES (?, ?)
`

type CreateGroupSettingsParams struct {
	GroupID                 int64
	IsWelcomeMessageEnabled int64
}

func (q *Queries) CreateGroupSettings(ctx context.Context, arg CreateGroupSettingsParams) error {
	_, err := q.db.ExecContext(ctx, createGroupSettings, arg.GroupID, arg.IsWelcomeMessageEnabled)
	return err
}

const disableWelcomeMessage = `-- name: DisableWelcomeMessage :exec
UPDATE groups_settings
SET is_welcome_message_enabled = 0
WHERE group_id = ?
`

func (q *Queries) DisableWelcomeMessage(ctx context.Context, groupID int64) error {
	_, err := q.db.ExecContext(ctx, disableWelcomeMessage, groupID)
	return err
}

const enableWelcomeMessage = `-- name: EnableWelcomeMessage :exec
UPDATE groups_settings
SET is_welcome_message_enabled = 1
WHERE group_id = ?
`

func (q *Queries) EnableWelcomeMessage(ctx context.Context, groupID int64) error {
	_, err := q.db.ExecContext(ctx, enableWelcomeMessage, groupID)
	return err
}

const isWelcomeMessageEnabled = `-- name: IsWelcomeMessageEnabled :one
SELECT is_welcome_message_enabled FROM groups_settings
WHERE group_id = ?
`

func (q *Queries) IsWelcomeMessageEnabled(ctx context.Context, groupID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, isWelcomeMessageEnabled, groupID)
	var is_welcome_message_enabled int64
	err := row.Scan(&is_welcome_message_enabled)
	return is_welcome_message_enabled, err
}
