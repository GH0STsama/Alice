CREATE TYPE ChatType AS ENUM (
	'private',
	'group',
	'supergroup',
	'channel'
);


CREATE OR REPLACE FUNCTION set_updated_at() RETURNS TRIGGER AS $$
BEGIN
	NEW.updated_at = CURRENT_TIMESTAMP;
END;
$$ LANGUAGE plpgsql;


CREATE TABLE IF NOT EXISTS chats (
	id BIGINT PRIMARY KEY,
	type ChatType NOT NULL,
	title TEXT NOT NULL,

	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE TRIGGER chats_updated_at BEFORE UPDATE ON chats
FOR EACH ROW EXECUTE FUNCTION set_updated_at();


CREATE TABLE IF NOT EXISTS users (
	id BIGINT PRIMARY KEY,
	language_code TEXT,

	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE TRIGGER chats_updated_at BEFORE UPDATE ON users
FOR EACH ROW EXECUTE FUNCTION set_updated_at();


CREATE TABLE IF NOT EXISTS user_stats (
	id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	chat_id BIGINT NOT NULL,	
	user_id BIGINT NOT NULL,

	warnings INTEGER NOT NULL DEFAULT 0,

	UNIQUE (chat_id, user_id),
	FOREIGN KEY (chat_id) REFERENCES chats(id) ON DELETE CASCADE,
	FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


CREATE TABLE chat_settings (
	id BIGINT PRIMARY KEY,

	is_captcha_enabled BOOLEAN NOT NULL DEFAULT FALSE,
	is_welcome_message_enabled BOOLEAN NOT NULL DEFAULT FALSE,

	FOREIGN KEY (id) REFERENCES chats(id) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS chat_triggers (
	id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	chat_id BIGINT NOT NULL,
	key TEXT NOT NULL,
	message TEXT NOT NULL,

	FOREIGN KEY (chat_id) REFERENCES chats(id)
);


CREATE TABLE messages (
	id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	chat_id BIGINT NOT NULL,

	welcome_message TEXT,

	FOREIGN KEY (chat_id) REFERENCES chats(id) ON DELETE CASCADE
);